{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:

  "Print to console": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": "cl",
    "body": ["console.log($1)"],
    "description": "Log output to console"
  },

  "Print error": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": "ce",
    "body": ["console.error($1)"],
    "description": "Log error to console"
  },

  "Print dir": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": "cd",
    "body": ["console.dir($1)"],
    "description": "Log dir to console"
  },

  "Function declaration": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": "fd",
    "body": ["function ${1:test}($2) {$3}"],
    "description": "Create function declaration"
  },

  "Async function declaration": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": "afd",
    "body": ["async function ${1:test}($2) {$3}"],
    "description": "Create async function declaration"
  },

  "Arrow function": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": "arfe",
    "body": ["const ${1:test} = ($2) => $3"],
    "description": "Create arrow function expression"
  },

  "Export default": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": "ed",
    "body": ["export default $1"],
    "description": "Export default something"
  },

  "Prettier ignore": {
    "scope": "",
    "prefix": "pi",
    "body": ["// prettier-ignore"],
    "description": "Ignore prettier next line"
  },

  "Comment": {
    "scope": "",
    "prefix": "com",
    "body": ["//--- ${1:COMMENT} ---//"],
    "description": "Comment"
  },

  "Comment side": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": "coms",
    "body": ["//////////////////////////////////////////////////"],
    "description": "Comment side"
  },

  "Query selector": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": "qs",
    "body": ["document.querySelector('$1')"],
    "description": "Query select an element"
  },

  "Query selector All": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": "qsa",
    "body": ["document.querySelectorAll('$1')"],
    "description": "Query select all elements"
  },

  "Id selecor": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": "gi",
    "body": ["document.getElementById('$1')"],
    "description": "Select element by id"
  },

  "Add event listener": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": "ade",
    "body": ["${1:test}.addEventListener('$2', $3)"],
    "description": "Add event listener to an el"
  }

  // "reactComponent": {
  //   "prefix": "rfc",
  //   "scope": "javascript, typescript, javascriptreact, typescriptreact",
  //   "body": [
  //     "export default function ${1:${TM_FILENAME_BASE}}() {",
  //     "\treturn (",
  //     "\t\t<div>",
  //     "\t\t\t${2:${TM_FILENAME_BASE}}",
  //     "\t\t</div>",
  //     "\t)",
  //     "}",
  //   ],
  //   "description": "React component"
  // },

  // "reactStyledComponent": {
  //   "prefix": "rsc",
  //   "scope": "javascript, typescript, javascriptreact, typescriptreact",
  //   "body": [
  //     "import styled from 'styled-components'",
  //     "",
  //     "const Styled${TM_FILENAME_BASE} = styled.$0``",
  //     "",
  //     "function ${TM_FILENAME_BASE}() {",
  //     "\treturn (",
  //     "\t\t<Styled${TM_FILENAME_BASE}>",
  //     "\t\t\t${TM_FILENAME_BASE}",
  //     "\t\t</Styled${TM_FILENAME_BASE}>",
  //     "\t)",
  //     "}",
  //     "",
  //     "export default ${TM_FILENAME_BASE}",
  //     ""
  //   ],
  //   "description": "React styled component"
  // },

  // "importCSSModule": {
  //   "prefix": "csm",
  //   "scope": "javascript, typescript, javascriptreact, typescriptreact",
  //   "body": ["import styles from './${TM_FILENAME_BASE}.module.css'"],
  //   "description": "Import CSS Module as `styles`"
  // },
}
